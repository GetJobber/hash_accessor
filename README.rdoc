= SerializedAccessors

This gem provides extended functionality to serialized hashed in rails. It allows you to define accessor methods for variable that rest inside a serialized hash. This is very useful if you have a large list of often changing DB variables on a model which don't get queried against. Storing account configurations or custom themes is a common scenario.

== Installation 

In your <code>Gemfile</code>:

  gem "serialized_accessor"

Then run:
  
  bundle install
  
== Usage

You define each accessor you want to be stored inside the serialized hash

<code>serialized_accessor _NAME_OF_HASH_, _NAME_OF_VARIABLE_, options</code>

Here is an example:

  class MyModel < ActiveRecord::Base
    serialize :options, Hash

    serialized_accessor :options, :currency, :default => "$USD"
    serialized_accessor :options, :display_currency_on_invoices, :type => :boolean, :default => true
    serialized_accessor :options, :invoice_due_date_net, :type => :integer, :default => 3
  end

=== Valid Options:

:default - if undefined, this plugin will create an empty instance of the defined type or null
:type - defaults to :string. Can also be :integer, :float, :boolean, or :array

==== For Arrays only:
:collects - only runs on arrays. Calls the lambda method on each item in the array before saving
:reject_blanks - removes all blank elements after the collect method



== Contributing & Reporting Issues

While I can't promise the most speedy response, I do plan to continue to maintain this gem. Please feel free to report any issues, provide feedback, or make suggestions on the {Issue Tracker}[http://github.com/forrest/serialized_accessors/issues]


---


Copyright on Updates - Copyright (c) 2011 OctopusApp Inc. ({getjobber.com}[http://getjobber.com]), released under the MIT license
